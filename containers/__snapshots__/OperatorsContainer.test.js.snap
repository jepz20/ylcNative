// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OperatorsContainer add of a player 1`] = `
Array [
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
    },
    "type": "@match/scoop_match",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
  Object {
    "payload": Object {
      "logId": 1,
    },
    "type": "@draw",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
    },
    "type": "@match/half_points",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
]
`;

exports[`OperatorsContainer adds points to a player 1`] = `
Array [
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
    },
    "type": "@match/scoop_match",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
  Object {
    "payload": Object {
      "logId": 1,
    },
    "type": "@draw",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
    },
    "type": "@match/half_points",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
      "points": "100",
    },
    "type": "@match/add_points",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
]
`;

exports[`OperatorsContainer draws a duel 1`] = `
Array [
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
    },
    "type": "@match/scoop_match",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
  Object {
    "payload": Object {
      "logId": 1,
    },
    "type": "@draw",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
]
`;

exports[`OperatorsContainer renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "green",
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 40,
            },
            Object {
              "fontSize": 15,
            },
          ]
        }
      >
        SCOOP
      </Text>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flexDirection": "row",
        },
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 40,
            },
            Object {
              "fontSize": 15,
            },
          ]
        }
      >
        DRAW
      </Text>
    </View>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 40,
            },
            Object {
              "fontSize": 15,
            },
          ]
        }
      >
        1/2
      </Text>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flexDirection": "row",
        },
        Object {
          "flex": 2,
        },
      ]
    }
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 40,
            },
            Object {
              "fontSize": 100,
            },
          ]
        }
      >
        +
      </Text>
    </View>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 40,
            },
            Object {
              "fontSize": 100,
            },
          ]
        }
      >
        -
      </Text>
    </View>
  </View>
</View>
`;

exports[`OperatorsContainer renders with no props 1`] = `
<View
  style={
    Object {
      "backgroundColor": "green",
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 40,
            },
            Object {
              "fontSize": 15,
            },
          ]
        }
      >
        SCOOP
      </Text>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flexDirection": "row",
        },
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 40,
            },
            Object {
              "fontSize": 15,
            },
          ]
        }
      >
        DRAW
      </Text>
    </View>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 40,
            },
            Object {
              "fontSize": 15,
            },
          ]
        }
      >
        1/2
      </Text>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flexDirection": "row",
        },
        Object {
          "flex": 2,
        },
      ]
    }
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 40,
            },
            Object {
              "fontSize": 100,
            },
          ]
        }
      >
        +
      </Text>
    </View>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#fff",
              "fontSize": 40,
            },
            Object {
              "fontSize": 100,
            },
          ]
        }
      >
        -
      </Text>
    </View>
  </View>
</View>
`;

exports[`OperatorsContainer scoops a duel 1`] = `
Array [
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
    },
    "type": "@match/scoop_match",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
]
`;

exports[`OperatorsContainer substract points to a player 1`] = `
Array [
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
    },
    "type": "@match/scoop_match",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
  Object {
    "payload": Object {
      "logId": 1,
    },
    "type": "@draw",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
    },
    "type": "@match/half_points",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
      "points": "100",
    },
    "type": "@match/add_points",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
  Object {
    "payload": Object {
      "logId": 1,
      "player": "1",
      "points": "100",
    },
    "type": "@substract_points",
  },
  Object {
    "payload": Object {
      "player": null,
    },
    "type": "@toggle_calculator_visibility",
  },
  Object {
    "type": "@rest_calculator_value",
  },
]
`;
