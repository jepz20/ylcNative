// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextButton renders a large button with a text 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
      },
      Array [
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
      ],
    ]
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#fff",
          "fontSize": 40,
        },
        Object {
          "fontSize": 100,
        },
      ]
    }
  >
    test
  </Text>
</View>
`;

exports[`TextButton renders a medium button with a text 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
      },
      Array [
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
      ],
    ]
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#fff",
          "fontSize": 40,
        },
        Object {
          "fontSize": 40,
        },
      ]
    }
  >
    test
  </Text>
</View>
`;

exports[`TextButton renders a small button with a text 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
      },
      Array [
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
      ],
    ]
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#fff",
          "fontSize": 40,
        },
        Object {
          "fontSize": 15,
        },
      ]
    }
  >
    test
  </Text>
</View>
`;

exports[`TextButton renders with a text 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
      },
      Array [
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
      ],
    ]
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#fff",
          "fontSize": 40,
        },
        Object {
          "fontSize": 40,
        },
      ]
    }
  >
    test
  </Text>
</View>
`;

exports[`TextButton renders with no props 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
      },
      Array [
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        },
        undefined,
      ],
    ]
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#fff",
          "fontSize": 40,
        },
        Object {
          "fontSize": 40,
        },
      ]
    }
  />
</View>
`;
